#include <bits/stdc++.h>
#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>

#define dump(...)		cerr << "[" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "]" << endl
#define arr_dump(...)		cerr << "[" << #__VA_ARGS__ "(" << sizeof((__VA_ARGS__))/sizeof((__VA_ARGS__)[0]) << "): ["; for (unsigned long long int it = 0; it < sizeof((__VA_ARGS__))/sizeof((__VA_ARGS__)[0]); ++it) cerr << (__VA_ARGS__)[it] << (it + 1 < sizeof((__VA_ARGS__))/sizeof((__VA_ARGS__)[0]) ? ", " : ""); cerr << "]]" << endl
#define vec_dump(...)		cerr << "[" << #__VA_ARGS__ "(" << (__VA_ARGS__).size() << "): ["; for (auto it = (__VA_ARGS__).begin(); it != (__VA_ARGS__).end(); ++it) cerr << *it << (it + 1 != (__VA_ARGS__).end() ? ", " : ""); cerr << "]]" << endl
#define pair_dump(...)		cerr << "[" << #__VA_ARGS__ ": (" << it->first << ", " << it->second << ")]" << endl
#define vec_pair_dump(...)	cerr << "[" << #__VA_ARGS__ "(" << (__VA_ARGS__).size() << "): ["; for (auto it = (__VA_ARGS__).begin(); it != (__VA_ARGS__).end(); ++it) cerr << "(" << it->first << ", " << it->second << ")" << (it + 1 != (__VA_ARGS__).end() ? ", " : ""); cerr << "]]" << endl

using namespace std;

/*
 * --- Day 9: Rope Bridge ---
 * --- Part Two ---
 *
 *  A rope snaps! Suddenly, the river is getting a lot closer than you remember.
 *  The bridge is still there, but some of the ropes that broke are now whipping
 *  toward you as you fall through the air!
 *
 *  The ropes are moving too quickly to grab; you only have a few seconds to
 *  choose how to arch your body to avoid being hit. Fortunately, your
 *  simulation can be extended to support longer ropes.
 *
 *  Rather than two knots, you now must simulate a rope consisting of ten knots.
 *  One knot is still the head of the rope and moves according to the series of
 *  motions. Each knot further down the rope follows the knot in front of it
 *  using the same rules as before.
 *
 *  Using the same series of motions as the above example, but with the knots
 *  marked H, 1, 2, ..., 9, the motions now occur as follows:
 *   == Initial State ==
 *
 *   ......
 *   ......
 *   ......
 *   ......
 *   H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
 *
 *   == R 4 ==
 *
 *   ......
 *   ......
 *   ......
 *   ......
 *   1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)
 *
 *   ......
 *   ......
 *   ......
 *   ......
 *   21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)
 *
 *   ......
 *   ......
 *   ......
 *   ......
 *   321H..  (3 covers 4, 5, 6, 7, 8, 9, s)
 *
 *   ......
 *   ......
 *   ......
 *   ......
 *   4321H.  (4 covers 5, 6, 7, 8, 9, s)
 *
 *   == U 4 ==
 *
 *   ......
 *   ......
 *   ......
 *   ....H.
 *   4321..  (4 covers 5, 6, 7, 8, 9, s)
 *
 *   ......
 *   ......
 *   ....H.
 *   .4321.
 *   5.....  (5 covers 6, 7, 8, 9, s)
 *
 *   ......
 *   ....H.
 *   ....1.
 *   .432..
 *   5.....  (5 covers 6, 7, 8, 9, s)
 *
 *   ....H.
 *   ....1.
 *   ..432.
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   == L 3 ==
 *
 *   ...H..
 *   ....1.
 *   ..432.
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   ..H1..
 *   ...2..
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   .H1...
 *   ...2..
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   == D 1 ==
 *
 *   ..1...
 *   .H.2..
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   == R 4 ==
 *
 *   ..1...
 *   ..H2..
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   ..1...
 *   ...H..  (H covers 2)
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   ......
 *   ...1H.  (1 covers 2)
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   ......
 *   ...21H
 *   ..43..
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   == D 1 ==
 *
 *   ......
 *   ...21.
 *   ..43.H
 *   .5....
 *   6.....  (6 covers 7, 8, 9, s)
 *
 *   == L 5 ==
 *
 *  ......
 *  ...21.
 *  ..43H.
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 *  ......
 *  ...21.
 *  ..4H..  (H covers 3)
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 *  ......
 *  ...2..
 *  ..H1..  (H covers 4; 1 covers 3)
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 *  ......
 *  ...2..
 *  .H13..  (1 covers 4)
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 *  ......
 *  ......
 *  H123..  (2 covers 4)
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 *  == R 2 ==
 *
 *  ......
 *  ......
 *  .H23..  (H covers 1; 2 covers 4)
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 *  ......
 *  ......
 *  .1H3..  (H covers 2, 4)
 *  .5....
 *  6.....  (6 covers 7, 8, 9, s)
 *
 * Now, you need to keep track of the positions the new tail, 9, visits. In this
 * example, the tail never moves, and so it only visits 1 position. However, be
 * careful: more types of motion are possible than before, so you might want to
 * visually compare your simulated rope to the one above.
 *
 * Here's a larger example:
 *  R 5
 *  U 8
 *  L 8
 *  D 3
 *  R 17
 *  D 10
 *  L 25
 *  U 20
 *
 * These motions occur as follows (individual steps are not shown):
 *  == Initial State ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  == R 5 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ...........54321H.........  (5 covers 6, 7, 8, 9, s)
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  == U 8 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ................H.........
 *  ................1.........
 *  ................2.........
 *  ................3.........
 *  ...............54.........
 *  ..............6...........
 *  .............7............
 *  ............8.............
 *  ...........9..............  (9 covers s)
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  == L 8 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ........H1234.............
 *  ............5.............
 *  ............6.............
 *  ............7.............
 *  ............8.............
 *  ............9.............
 *  ..........................
 *  ..........................
 *  ...........s..............
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  == D 3 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  .........2345.............
 *  ........1...6.............
 *  ........H...7.............
 *  ............8.............
 *  ............9.............
 *  ..........................
 *  ..........................
 *  ...........s..............
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  == R 17 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ................987654321H
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ...........s..............
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  == D 10 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ...........s.........98765
 *  .........................4
 *  .........................3
 *  .........................2
 *  .........................1
 *  .........................H
 *
 *  == L 25 ==
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ...........s..............
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  H123456789................
 *
 *  == U 20 ==
 *
 *  H.........................
 *  1.........................
 *  2.........................
 *  3.........................
 *  4.........................
 *  5.........................
 *  6.........................
 *  7.........................
 *  8.........................
 *  9.........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ...........s..............
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *
 *  Now, the tail (9) visits 36 positions (including s) at least once:
 *
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  ..........................
 *  #.........................
 *  #.............###.........
 *  #............#...#........
 *  .#..........#.....#.......
 *  ..#..........#.....#......
 *  ...#........#.......#.....
 *  ....#......s.........#....
 *  .....#..............#.....
 *  ......#............#......
 *  .......#..........#.......
 *  ........#........#........
 *  .........########.........
 *
 * Simulate your complete series of motions on a larger rope with ten knots. How
 * many positions does the tail of the rope visit at least once?
 */

#define N_INPUTS 	2000

int main()
{
	pair <long long, long long> k[10];
	map <string, bool> visited;
	stringstream ss;
	string key;
	char direction;
	short n, x, y;

	for (short i = 0; i < 10; ++i)
		k[i].first = k[i].second = 0;

	for (int i = 0; i < N_INPUTS; ++i) {
		cin >> direction >> n;

		for (int j = 0; j < n; ++j) {
			switch(direction) {
				case 'U': ++k[0].first;break;
				case 'D': --k[0].first; break;
				case 'L': --k[0].second; break;
				case 'R': ++k[0].second; break;
			}

			for (int l = 1; l < 10; ++l) {
				if (abs(k[l - 1].first - k[l].first) == 2 &&
						abs(k[l - 1].second - k[l].second) == 2) {
					k[l].first = (k[l - 1].first + k[l].first)/2;
					k[l].second = (k[l - 1].second + k[l].second)/2;
				} else if (abs(k[l - 1].first - k[l].first) == 2) {
					k[l].first = (k[l - 1].first + k[l].first)/2;
					k[l].second = k[l - 1].second;
				} else if (abs(k[l - 1].second - k[l].second) == 2) {
					k[l].second = (k[l - 1].second + k[l].second)/2;
					k[l].first = k[l - 1].first;
				}
			}

			ss.clear();
			ss << k[9].first << ";" << k[9].second;
			ss >> key;
			visited[key] = true;
		}
	}

	cout << visited.size() << endl;

	return 0;
}
